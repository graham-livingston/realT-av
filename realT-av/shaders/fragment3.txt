#version 330 core
precision highp float;

in vec2 fragCoord; // Assuming you pass the fragment coordinates from the vertex shader
out vec4 screenColor;

uniform vec2 u_resolution;
uniform float u_time; // Pass elapsed time for animation

uniform float fftMagnitudes[128]; // Array of magnitudes from the FFT
uniform float u_fftAverage; // Format of the FFT data

struct IntegratedData {
    int notesCount;
    int magnitudesCount;
    float mean;
    float median;
    float ranking;
};

uniform IntegratedData integratedData[21]; // Replace <number_of_ranges> with the actual number


// Basic noise function
float noise(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

// Fractal Brownian Motion function
float fbm(vec2 st) {
    float value = 0.0;
    float amplitude = 0.4;
    float frequency = 0.0;
    // Iterate through octaves
    for (int i = 0; i < 5; ++i) {
        value += amplitude * noise(st);
        st *= 0.08;
        amplitude *= 1.5;
    }
    return value;
}

// Modified circle function using fBm for blurring the edge
float circle(in vec2 _st, in float _radius){
    vec2 dist = _st - vec2(0.5);
    float edgeBlur = fbm(_st * u_time * 0.5); // Use fBm to create edge blur
    return 1.0 - smoothstep(_radius - (_radius * 0.11) - edgeBlur,
                            _radius + (_radius * 0.01) + edgeBlur,
                            dot(dist, dist) * 40.784);
}

void main() {
    vec2 st = gl_FragCoord.xy / u_resolution.xy;
    
    // Adjust st for the aspect ratio of the screen
    st.x *= u_resolution.x / u_resolution.y;

    float pct = distance(st,vec2(0.2,sin(st.x)));
	float circ = circle(vec2(0.7,u_fftAverage/1.4),0.5);
    float circ2 = circle(vec2(0.5),1.0);
    vec3 color = vec3(circle(st, 0.9)*pct);
	color /= (circ - u_fftAverage);
    color += circ2;
    screenColor = vec4(color, 1.0);
}