#version 330 core
precision highp float;

in vec2 fragCoord; // Assuming you pass the fragment coordinates from the vertex shader
out vec4 screenColor;

uniform vec2 u_resolution;
uniform float u_time; // Pass elapsed time for animation

uniform float fftMagnitudes[32]; // Array of magnitudes from the FFT



// Uniforms for row movement: direction and speed
float u_row1Speed = 0.1;
 float u_row1Direction = 1.0;
 float u_row2Speed = 1.0;
 float u_row2Direction = -1.0;
 float u_row3Speed = 0.3;
 float u_row3Direction = -1.0;
 float u_row4Speed = 0.4;
 float u_row4Direction = 1.0;
 float u_row5Speed = 1.3;
 float u_row5Direction = -1.0;
 float u_row6Speed = 0.03;
 float u_row6Direction = -1.0;
 float u_row7Speed = 1.1;
 float u_row7Direction = 1.0;
 float u_row8Speed = 0.03;
 float u_row8Direction = 1.0;

// Function to create a pattern based on time
float func(float t) {
    float u = u_time * 8.0;
    return (sin(t * 57.0 + u) + sin(t * 59.0 + u * 1.1) + t * 13.313) * 2.5;
}

// Overloaded function to handle vec2 input
float func(vec2 t) {
    return func(t.x + 8.5463 * t.y);
}

// Main function
void main() {
    vec2 uv = gl_FragCoord.xy / u_resolution.xy; // Normalized pixel coordinates

    // Adjust uv.y based on row and its respective direction and speed
    float rowHeight = 1.0 / 10.0; // Assuming 10 rows for example
    float rowIndex = floor(uv.y / rowHeight);
    if (rowIndex == 0.0) {
        uv.x += u_time * u_row1Speed * u_row1Direction;
    } else if (rowIndex == 1.0) {
        uv.x += u_time * u_row2Speed * u_row2Direction;
    } else if (rowIndex == 2.0) {
        uv.x += u_time * u_row3Speed * u_row3Direction;
    } else if (rowIndex == 3.0) {
        uv.x += u_time * u_row4Speed * u_row4Direction;
    } else if (rowIndex == 4.0) {
        uv.x += u_time * u_row5Speed * u_row5Direction;
    }  else if (rowIndex == 5.0) {
        uv.x += u_time * u_row6Speed * u_row6Direction;
    } else if (rowIndex == 6.0) {
        uv.x += u_time * u_row7Speed * u_row7Direction;
    } else if (rowIndex == 7.0) {
        uv.x += u_time * u_row8Speed * u_row8Direction;
    }
    // Add more conditions for more rows as needed

    // Calculate the fractal pattern based on the modified uv coordinates
    float f = fract(func(vec2(
        uv.x * 0.5,
        floor(uv.y * 10.0)
    )) + u_time * 3.0);

    // Set the fragment color based on the pattern
    screenColor = vec4(step(0.3, f) * step(0.3, uv.y * 10.0 + 0.15));
}