#version 330 core
precision highp float;

in vec2 fragCoord; // Assuming you pass the fragment coordinates from the vertex shader
out vec4 screenColor;

uniform vec2 u_resolution;
uniform float u_time; // Pass elapsed time for animation

uniform float fftMagnitudes[32]; // Array of magnitudes from the FFT
uniform float u_fftAverage; // Average of all magnitudes


float circle(in vec2 _st, in float _radius){
    vec2 dist = _st-vec2(0.5);
	return 1.-smoothstep(_radius-(_radius*0.01),
                         _radius+(_radius*0.01),
                         dot(dist,dist)*4.0);
}

void main(){
	vec2 st = gl_FragCoord.xy/u_resolution.xy;
	// Adjust st for the aspect ratio of the screen
    st.x *= u_resolution.x / u_resolution.y;

	st.x -= u_fftAverage/2.5;
	vec3 color = vec3(circle(st,0.5));

	screenColor = vec4( color, 1.0 );

}